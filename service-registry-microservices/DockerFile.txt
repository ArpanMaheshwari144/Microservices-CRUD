## **Step 1: Build the Docker Image**

Build the Docker image from the Dockerfile in the current directory. Use the `-t` flag to tag the image with a name (`insurance_crud` in this case).

```bash
docker build -t insurance_crud .
```

---

## **Step 2: Verify the Docker Image**

List all Docker images to verify that your image has been built successfully.

```bash
docker images
```

---

## **Step 3: Run the `insurance_crud` Container**

Run a Docker container from the `insurance_crud` image and map port `8081` on the host to port `8081` in the container.

```bash
docker run -p 8081:8081 insurance_crud
```

---

## **Step 4: Run a MySQL Container**

Run a MySQL container, specifying the version of MySQL (replace `version` with the actual version number).

```bash
docker run mysql:<version>
```

---

## **Step 5: Run MySQL Container with Environment Variables**

Run a MySQL container with specific environment variables:
- Expose and map port `3307` on the host to port `3306` in the container.
- Set the MySQL root password and database name.
- Run the container in detached mode (`-d`).

```bash
docker run -p 3307:3306 --name your_container_name \
  -e MYSQL_ROOT_PASSWORD=your_password \
  -e MYSQL_DATABASE=your_database_name -d mysql
```

---

## **Step 6: Create a Docker Network**

Create a Docker network named `networkmysql`.

```bash
docker network create networkmysql
```

---

## **Step 7: Connect MySQL Container to the Network**

Connect the previously created MySQL container to the `networkmysql` network.

```bash
docker network connect networkmysql your_container_name
```

---

## **Step 8: Rebuild the Docker Image (Optional)**

Build the Docker image again if changes have been made. Use the `-t` flag to tag the image with a name.

```bash
docker build -t your_image_name .
```

---

## **Step 9: Run the `insurance_crud` Container with MySQL Connection**

Run the `insurance_crud` container with environment variables for MySQL connection:
- Map port `8090` on the host to port `8081` in the container.
- Connect the container to the `networkmysql` network.
- Specify MySQL host, port, database name, user, and password.

```bash
docker run -p 8090:8081 --name insurancecrudcontainer --net networkmysql \
  -e MYSQL_HOST=your_mysql_container_name \
  -e MYSQL_PORT=3306 \
  -e MYSQL_DB_NAME=your_database_name \
  -e MYSQL_USER=your_mysql_user \
  -e MYSQL_PASSWORD=your_password your_image_name
```

---

## **Step 10: Verify Running Containers**

List all running containers to verify that your containers are running as expected.

```bash
docker ps
```

## **Step 11: application.properties Configuration**

Add the following configurations to your application.properties file:

server.port=8081
spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/${MYSQL_DB_NAME:db_name}
spring.datasource.username=${MYSQL_USER:db_user}
spring.datasource.password=${MYSQL_PASSWORD:db_password}
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
